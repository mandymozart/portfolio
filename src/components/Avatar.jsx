/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 public/models/avatar-winter.glb -o src/components/AvatarWinter.jsx -r public 
*/

import { useAnimations, useFBX, useGLTF } from '@react-three/drei';
import { useControls } from 'leva';
import { Suspense, useEffect, useRef } from 'react';
import { MovingSpot } from './Models/Lights/MovingSpot';

const getAnimationWithName = (fbx, name) => {
  const animation = fbx.animations[0];
  animation.name = name;
  console.log(animation);
  return animation;
};

export function Avatar({ ...props }) {
  const ref = useRef();

  const { animations, scene } = useGLTF('/models/avatar-winter.glb');
  const flying = useFBX('/animations/Flying.fbx');
  const floating = useFBX('/animations/Floating.fbx');
  const combinedAnimations = [
    ...animations,
    getAnimationWithName(flying, 'Flying'),
    getAnimationWithName(floating, 'Floating'),
  ];
  const { actions } = useAnimations(combinedAnimations, ref);
  const { animation, timeScale, position, scale } = useControls('AVATAR', {
    animation: {
      value: 'SwaggerWalkInPlace',
      options: Object.keys(actions),
    },
    timeScale: {
      value: 1,
      min: -1,
      max: 1,
      step: 0.01,
    },
    scale: {
      value: 0.5,
      min: 0.1,
      max: 100,
      step: 0.01,
    },
    position: {
      x: 2.5,
      y: 2,
      z: 0,
    },
  });

  useEffect(() => {
    if (actions) actions[animation].reset().fadeIn(0.5).play();
    return () => {
      if (actions[animation]) actions[animation].fadeOut(0.5);
    };
  }, [animation]);

  useEffect(() => {
    actions[animation].setEffectiveTimeScale(timeScale);
  }, [timeScale]);

  return (
    <Suspense fallback={null}>
      <group
        position={[position.x, position.y, position.z]}
        scale={scale}
      >
        <MovingSpot />
        <primitive
          ref={ref}
          object={scene}
          {...props}
        />
      </group>
    </Suspense>
  );
}

useGLTF.preload('/models/avatar-winter.glb');
